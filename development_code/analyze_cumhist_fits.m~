% analyze_cumhist_fits

clear
load('cumhist_data')
load('cumhist_fits_random_inits')
load('cumhist_stubborn_pars.mat')
%%

bMaxR = 0;
thresh = .05;
%cumhist_pVals = exp(-zCumhist_Avg.^2/2);
if bMaxR
    cumhist_pVals = exp(-MaxR.^2/2);
else
    cumhist_pVals = exp(-zCumhist.^2/2);
end
minTau = .2;

sigControl = cumhist_pVals<thresh & tauOpt>minTau;
[sigCond sigSubj] = find(sigControl);
sigSingleInds = find(sigControl);

numSig = length(sigCond);

binWidth = .1;
Hbins = 0:binWidth:1;
nBins = 1/binWidth;

Tsame_over_muSame = zeros(numSig,nBins);
Tother_over_muOther = zeros(numSig,nBins);

T1_by_H1 = zeros(numSig,nBins);
T2_by_H1 = zeros(numSig,nBins);

segProp = zeros(numSig,1);
tauSig = zeros(numSig,1);

suboptimalFits = []; goodFits = [];
hCloud = bigFigure; hCloudStabilized = bigFigure;


for ind = 1:numSig
    
    cond = sigCond(ind); subj = sigSubj(ind);
    
    foo = cumhistOptInfo(cond,subj).message;
    if all(foo(1:19) == 'Local minimum found') || bMaxR
        goodFits = [goodFits; cond subj];
        DursCell = squeeze(squeeze(DurationsCell(cond,subj,:)));
        DursCell = DursCell(~cellfun('isempty',DursCell));
        allDurs = vertcat(DursCell{:});
        mu = mean(allDurs(allDurs(:,1)~=0,1));
        muInt = IntMeans(cond,subj); muSeg = SegMeans(cond,subj);
        
        segProp(ind) = muSeg/(muInt+muSeg);
        
        mle_pars = cumhist_pars(:,cond,subj);
        if ~bMaxR
            tau = abs(tauOpt(cond,subj));
            diffTaus(ind) = tau - tauMaxR(cond,subj);
        else
            tau = tauMaxR(cond,subj);
        end
        tauSig(ind) = tau;
        
        H_Durs = [];
        
        % construct an array of H values and Durs, from beginning
        for rInd = 1:length(DursCell)
            
            Durs = DursCell{rInd};
            [h1 h2] = compute_H_2(Durs,tau,0);
            
            % non-clipped; from the beginning of the trial!
            % try finding steady state, like in the original paper
            H_Durs = [H_Durs; h1(1:end-1,1) h2(1:end-1,1) Durs(2:end,:)];
            
        end
        if any(H_Durs(:,1:2)<0), keyboard; end
        intInds = H_Durs(:,4)==1; segInds = H_Durs(:,4) == 2;
        
        figure(hCloud); plot(H_Durs(intInds,1),H_Durs(intInds,3),'r.'); hold on;
        plot(H_Durs(intInds,2),H_Durs(intInds,3),'b.');
        plot(H_Durs(segInds,2),H_Durs(segInds,3),'r.');
        plot(H_Durs(segInds,1),H_Durs(segInds,3),'b.');
        
        stabilized = find(H_Durs(:,1) + H_Durs(:,2) == 1);
        H1 = H_Durs(stabilized,1); H2 = H_Durs(stabilized,2); durstmp = H_Durs(stabilized,3:4);
        
        intInds = durstmp(:,2)==1; segInds = durstmp(:,2)==2;
        figure(hCloudStabilized); plot(H1(intInds),durstmp(intInds,1),'r.');
        hold on;
        plot(H1(segInds),durstmp(segInds,1),'b.');
        plot(H2(segInds),durstmp(segInds,1),'r.');
        plot(H2(intInds),durstmp(intInds,1),'b.');
        
        for hInd = 1:length(Hbins)-1
            
            % finds H vals preceding either percept in the specified bin
            h1vals = find(H1>=Hbins(hInd) & H1<=Hbins(hInd+1));
            h2vals = find(H2>=Hbins(hInd) & H2<=Hbins(hInd+1));
            
            inds = unique(vertcat(h1vals, h2vals));
            
            H1Durs = durstmp(h1vals,:);
            h11Durs = H1Durs(H1Durs(:,2)==1,1);
            h12Durs = H1Durs(H1Durs(:,2)==2,1);
            
            H2Durs = durstmp(h2vals,:);
            h22Durs = H2Durs(H2Durs(:,2)==2,1);
            h21Durs = H2Durs(H2Durs(:,2)==1,1);
            
            % this is probably the right way
            normSame = vertcat(h11Durs/muInt,h22Durs/muSeg);
            normOther = vertcat(h12Durs/muSeg,h21Durs/muInt);
            %
            %         normSame = vertcat(h11Durs/mu,h22Durs/mu);
            %         normOther = vertcat(h12Durs/mu,h21Durs/mu);
            
            Tsame_over_muSame(ind,hInd) = mean(normSame);
            Tother_over_muOther(ind,hInd) = mean(normOther);
            
            foo = mean(h11Durs)/muInt;
            % if foo>5, keyboard; end
            
            T1_by_H1(ind,hInd) = mean(h11Durs)/muInt;
            T2_by_H1(ind,hInd) = mean(h12Durs)/muSeg;
        end
        
    else
        suboptimalFits = [suboptimalFits; sigCond(ind) sigSubj(ind)];
        continue;
    end
end

Tsame_over_muSame(all(Tsame_over_muSame==0,2),:) = [];
Tother_over_muOther(all(Tother_over_muOther==0,2),:) = [];
T1_by_H1(all(T1_by_H1==0,2),:) = [];
T2_by_H1(all(T2_by_H1==0,2),:) = [];

binCenters = binWidth/2:binWidth:1;
figure; plot(binCenters,mean(Tsame_over_muSame,'omitnan'),'r'); hold on;
plot(binCenters,mean(Tother_over_muOther,'omitnan'),'b'); mk_Nice_Plot;
xlabel('H'); ylabel('T_{h=x} / T_{avg}'); legend('same','other');

figure; plot(binCenters,mean(T1_by_H1, 'omitnan'),'r'); hold on;
plot(binCenters,mean(T2_by_H1,'omitnan'),'b'); mk_Nice_Plot;
xlabel('H1'); ylabel('T_{h=x} / T_{avg}'); legend('T1','T2')
title('Duration as a function of history')

figure(hCloud); axis([0 1 0 60]); mk_Nice_Plot; xlabel('H');
ylabel('T_{h=x} / T_{avg}'); legend('same','other');
title('T vs cumulative history');

figure(hCloudStabilized); axis([0 1 0 60]); mk_Nice_Plot; xlabel('H');
ylabel('T_{h=x} / T_{avg}'); legend('same','other');title('T vs cumulative history (steady state)');

%% make some BUFs! use only the good fits


for ind = 1:length(goodFits)
    
    cond = goodFits(ind,1); subj = goodFits(ind,2);
    DursCell = squeeze(squeeze(DurationsCell(cond,subj,:)));
    DursCell = DursCell(~cellfun('isempty',DursCell));
    
    nDatasets = length(DursCell);
    
    pars.window = 15; pars.step = .1;
    
    for rind = 1:nDatasets
        Durs = DursCell{rind};
        Durs = Durs(4:end,:);
        %if length(Durs)<4, continue; end
        %keyboard;
        ARP_data(ind,rind) = ARP_durs_BUF(Durs,pars);
    end
    
    ARP_data_tot(ind) = combine_ARP_data(ARP_data(ind,:));
    
end

BUF = mean(vertcat(ARP_data_tot(:).BUF),1);

%%
for ind = 1:length(suboptimalFits)
    cond = suboptimalFits(ind,1); subj = suboptimalFits(ind,2);
    DursCell = squeeze(squeeze(DurationsCell(cond,subj)));
    DursCell = DursCell(~cellfun('isempty',DursCell));
        
    init = cumhist_pars(:,cond,subj);
    [parmhat fval parsMaxR output maxR] = estimate_cumhist_pars(Durs,0,init);

    if all(output.message(1:19) == 'Local minimum found')
        disp('The prodigal son returns!')
        cumhist_pars(:,cond,subj) = parmhat;
        cumhistOptInfo(cond,subj) = output;
        tauOpt(cond,subj) = parmhat(end);
        zCumhist(cInd,sInd) = compute_cumhist_corr(DursCell,parmhat(end));
    else
        [parmhat fval parsMaxR output maxR] = estimate_cumhist_pars(Durs,0,parmhat);
        if all(output.message(1:19) == 'Local minimum found')
            disp('The prodigal son returns!')
            cumhist_pars(:,cond,subj) = parmhat;
            cumhistOptInfo(cond,subj) = output;
            tauOpt(cond,subj) = parmhat(end);
            zCumhist(cInd,sInd) = compute_cumhist_corr(DursCell,parmhat(end));
        else
            [parmhat fval parsMaxR output maxR] = estimate_cumhist_pars(Durs,0,parmhat);
            if all(output.message(1:19) == 'Local minimum found')
                disp('The prodigal son returns!')
                cumhist_pars(:,cond,subj) = parmhat;
                cumhistOptInfo(cond,subj) = output;
                tauOpt(cond,subj) = parmhat(end);
                zCumhist(cInd,sInd) = compute_cumhist_corr(DursCell,parmhat(end));
            else
                disp('i give up')
            end
        end
    end
end
save('cumhist_stubborn_pars')