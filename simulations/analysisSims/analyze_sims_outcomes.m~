% analyze sims
% basically i load a filename like low-adapt/low_noise.mat and go
% 
% set a save directory for plots
clear; 



load ~/Dropbox/my' codes'/rinzel/simulations/simulation_results&figs/low-adapt_G=.1/normal.mat
%%
dir = '~/Dropbox/my codes/rinzel/simulations/simulation_results&figs/low-adapt_G=.1/';
cd(dir);
v2struct(pars);
mkdir([filename '_plots']);
cd([filename '_plots']);
%% plot taBUFs and hists

v2struct(short_trial_outcomes);

bigFigure; subplot(1,2,1); plot(taxta,BUFta,taxta,BUFarpS,'r--'); mk_Nice_Plot;
xlabel('time (s)'); ylabel('p(split)');
%legend([num2str(length(short_trial)) ' trials'], 'ARP prediction', 'Location','Best');
text(5,0.1,['rSquared = ' num2str(rSquaredS)]);
title(['Trial averaged BUF, G = ' num2str(Gamma) ' sig = ' num2str(sig) ' ' filename]);

axmax = max([durs1S durs2S]);

subplot(2,2,2); plot_gamma_hist_fit(durs1S,g1S); title('grouped'); xlim([0 axmax*1.25])
subplot(2,2,4); plot_gamma_hist_fit(durs2S,g2S); title('split'); xlim([0 axmax*1.25])

%% longer window for longer durs
[BUF_longer tax_longer] = make_trial_averaged_BUF(Durs,.01,19.5);

[error rSquared BUF_adj] = compare_buildup_functions2([g1S;g2S],BUF_longer,tax_longer);
subplot(1,2,1); plot(tax_longer,BUF_longer,tax_longer,BUF_adj,'r--'); mk_Nice_Plot;
xlabel('time (s)'); ylabel('p(split)');
legend([num2str(long_trial_outcomes.nWindows) ' trials'], 'ARP prediction', 'Location','Best');
title(['Trial averaged BUF, G = ' num2str(Gamma) ' sig = ' num2str(sig) ' ' filename]);
%% save
fname = 'BUFs&hists_ta'; print('-depsc', fname);
%%
%v2struct(short_trial_outcomes);
[bufpars_fit BUFfit t] = find_fourier_BUF_fit(BUFta,taxta);
bigFigure; clf; subplot(1,2,1); 
plot(taxta,BUFta,'b',t,BUFfit,'r--'); mk_Nice_Plot;
axis([0 10 0 1]);

axmax = max([durs1S durs2S]);


subplot(2,2,2);
plot_gamma_hist_fit(durs1S,bufpars_fit(1:2)); xlim([0 axmax*1.25]);
[g1 CI_gam1] = gamfit(durs1S); disp(CI_gam1); text(8, 100, num2str(CI_gam1));
subplot(2,2,4);
plot_gamma_hist_fit(durs2S,bufpars_fit(3:4)); xlim([0 axmax*1.25]);
[g2 CI_gam2] = gamfit(durs2S); disp(CI_gam2); text(8, 100, num2str(CI_gam2));
subplot(1,2,1); axis([0 10 0 1]);
% cd([filename '_plots']);
% print -depsc 'reverse fit'



%% plot first percept hists and other p1 percept hists

% i'm going to want to get the distr. for first durations of a trial, and
% that corresponding to all the non-first, non-last durations of a trial

height = length(Durs);

trial_inds = find(Durs(:,2)==0);
first_percept_inds = trial_inds + 1;
last_percept_inds = trial_inds - 1;
first_percept_inds = first_percept_inds(first_percept_inds<=height);
last_percept_inds = last_percept_inds(last_percept_inds>0);

first_percept_durs = Durs(first_percept_inds,1);

excluded_from_other_inds = [first_percept_inds; last_percept_inds];
Durs_gutted = Durs;
Durs_gutted(excluded_from_other_inds,:)=[];

p1_inds = find(Durs_gutted(:,2)==1);

% now I just need to compile inds to exclude from p1_inds

other_percept_durs = Durs_gutted(p1_inds,1);

%% plot that out

    maxXval = max([first_percept_durs;other_percept_durs]);
    xax = [0 maxXval + 2];
    
    g1st = find_gamma_pars(first_percept_durs);
    gOther = find_gamma_pars(other_percept_durs);
    figure; subplot(211); [count bin] = hist(first_percept_durs); 
    bar(bin,count,1); mk_Nice_Plot;
    axis([xax 0 max(count)+2]);
    title(['durations of the first percept on a trial k=' num2str(g1st(1),3) ' theta=' (num2str(g1st(2),3))]); 
    legend(num2str(length(first_percept_durs)),'Location','Best');
    
    subplot(212); [count bin] = hist(other_percept_durs); bar(bin,count,1); 
    mk_Nice_Plot; axis([xax 0 max(count)+2]);
    title(['durations of non-first grouped percepts k=' num2str(gOther(1),3) ' theta=' (num2str(gOther(2),3))]);  
    legend(num2str(length(other_percept_durs)),'Location','Best');

%%
fname = 'first_vs_other_hists'; print('-depsc',fname);
%% sample size of short trial vs long trial

%% correlations

%% durs vs durs1, durs2, etc

%% let's look at the growth of adaptation from t = 0

adaptation_timecourses = vertcat(short_trial.s1,short_trial.s2);
mean_adaptation = mean(adaptation_timecourses); 
figure; plot(short_trial(1).tax,mean_adaptation); mk_Nice_Plot
title('mean pooled adaptation levels');


%% let's show how trial timecourses line up
which_trials = randperm(length(short_trial));
nIncluded = 7;
which_trials = which_trials(1:nIncluded);

figure; tmpdurs = [];
for ind = 1:nIncluded
    tmp = short_trial(which_trials(ind));
    subplot(nIncluded+1,1,ind); plot(tmp.tax,tmp.u1,'m--',tmp.tax,tmp.u2,'b'); 
    axis([0 19.5 0 1]);
    mk_Nice_Plot
    
    [t1 t2 trialdurs] = timecourse2durs(tmp.u1,tmp.u2,tmp.tax);
    tmpdurs = vertcat(tmpdurs, [0 0], trialdurs);
end
[mini_buf t] = make_trial_averaged_BUF(tmpdurs,.01,19.5);

%subplot(nIncluded, 1, nIncluded); 
figure; plot(t,mini_buf);





%% balls no Durs?
Durs = [0 0];
nTrials = length(short_trial);
%figure;

for ind = 1:nTrials
    durstmp = short_trial(ind).durstmp;
    Durs = [Durs; durstmp; 0 0];
    %subplot(nTrials,1,ind); plot(tax,u1,tax,u2,'r',tax,s1,':',tax,s2,'r:');
    %axis([0 10 0 1]);
end
short_trial_outcomes.Durs = Durs; 
